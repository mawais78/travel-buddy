{"ast":null,"code":"import _toConsumableArray from \"/Users/sbeuran/Desktop/dev/coding_challenge/travel-buddy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/sbeuran/Desktop/dev/coding_challenge/travel-buddy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/sbeuran/Desktop/dev/coding_challenge/travel-buddy/src/pages/SearchResultsPage.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport Button from '../components/Button';\nimport { CITIES } from '../constants/const';\nimport Distances from '../components/Distances';\nfunction SearchResultsPage() {\n  var location = useLocation();\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    origin = _useState2[0],\n    setOrigin = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    intermediateCities = _useState4[0],\n    setIntermediateCities = _useState4[1];\n  var _useState5 = useState([]),\n    _useState6 = _slicedToArray(_useState5, 2),\n    cities = _useState6[0],\n    setCities = _useState6[1];\n  var _useState7 = useState(''),\n    _useState8 = _slicedToArray(_useState7, 2),\n    destination = _useState8[0],\n    setDestination = _useState8[1];\n  var _useState9 = useState(''),\n    _useState10 = _slicedToArray(_useState9, 2),\n    date = _useState10[0],\n    setDate = _useState10[1];\n  var _useState11 = useState(''),\n    _useState12 = _slicedToArray(_useState11, 2),\n    passengers = _useState12[0],\n    setPassengers = _useState12[1];\n  var _useState13 = useState(''),\n    _useState14 = _slicedToArray(_useState13, 2),\n    distance = _useState14[0],\n    setDistance = _useState14[1];\n  var _useState15 = useState([]),\n    _useState16 = _slicedToArray(_useState15, 2),\n    distances = _useState16[0],\n    setDistances = _useState16[1];\n  var _useState17 = useState(false),\n    _useState18 = _slicedToArray(_useState17, 2),\n    loading = _useState18[0],\n    setLoading = _useState18[1];\n  var _useState19 = useState(false),\n    _useState20 = _slicedToArray(_useState19, 2),\n    error = _useState20[0],\n    setError = _useState20[1];\n  useEffect(function () {\n    var searchParams = new URLSearchParams(location.search);\n    setOrigin(searchParams.get('origin') || '');\n    setDestination(searchParams.get('destination') || '');\n    var intermediateCitiesStr = searchParams.get('intermediateCities');\n    if (intermediateCitiesStr) {\n      setIntermediateCities(intermediateCitiesStr.split(','));\n    } else {\n      setIntermediateCities([]);\n    }\n    setDate(searchParams.get('date') || '');\n    setPassengers(searchParams.get('passengers') || '');\n    // Retrieve and set other form data from URL parameters\n  }, [location]);\n  useEffect(function () {\n    if (origin !== '' && destination !== '') {\n      calculateDistance();\n    }\n  }, [origin, destination]);\n  var calculateDistance = function calculateDistance() {\n    setLoading(true);\n    setError(false);\n\n    // Simulate asynchronous distance calculation\n    setTimeout(function () {\n      try {\n        var cityCoordinates = CITIES.reduce(function (coords, _ref) {\n          var _ref2 = _slicedToArray(_ref, 3),\n            name = _ref2[0],\n            lat = _ref2[1],\n            lon = _ref2[2];\n          coords[name] = {\n            lat: parseFloat(lat.toString()),\n            lon: parseFloat(lon.toString())\n          };\n          return coords;\n        }, {});\n        var route = [origin].concat(_toConsumableArray(intermediateCities), [destination]);\n        setCities(route);\n        var totalDistance = 0;\n        for (var i = 0; i < route.length - 1; i++) {\n          var startCity = route[i];\n          var endCity = route[i + 1];\n          var startCoord = cityCoordinates[startCity];\n          var endCoord = cityCoordinates[endCity];\n          if (!startCoord || !endCoord) {\n            throw new Error('Invalid cities for distance calculation');\n          }\n          var _distance = calculateHaversineDistance(startCoord, endCoord);\n          setDistances([].concat(_toConsumableArray(distances), [_distance]));\n          totalDistance += _distance;\n        }\n        setDistance(totalDistance.toFixed(2));\n        setLoading(false);\n      } catch (error) {\n        console.log(error);\n        setDistance('');\n        setLoading(false);\n        setError(true);\n      }\n    }, 500);\n  };\n  var calculateHaversineDistance = function calculateHaversineDistance(startCoord, endCoord) {\n    var earthRadius = 6371; // in kilometers\n\n    var toRadians = function toRadians(degrees) {\n      return degrees * Math.PI / 180;\n    };\n    var dLat = toRadians(endCoord.lat - startCoord.lat);\n    var dLon = toRadians(endCoord.lon - startCoord.lon);\n    var lat1 = toRadians(startCoord.lat);\n    var lat2 = toRadians(endCoord.lat);\n    var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(lat1) * Math.cos(lat2);\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    var distance = earthRadius * c;\n    return distance;\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"result\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }, loading ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }\n  }, \"Loading...\") : /*#__PURE__*/React.createElement(React.Fragment, null, error ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }\n  }, \"Oops! Something went wrong!\")) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 17\n    }\n  }, \"Origin: \", origin), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 17\n    }\n  }, \"Intermediate Cities: \", intermediateCities.join(', ')), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 17\n    }\n  }, \"Destination: \", destination), /*#__PURE__*/React.createElement(Distances, {\n    cities: cities,\n    distances: distances,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"color-font\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 20\n    }\n  }, distance, \" km\"), \" is total distance\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"color-font\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 20\n    }\n  }, passengers), \" Passengers\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"color-font\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 17\n    }\n  }, date))), /*#__PURE__*/React.createElement(Button, {\n    title: \"Back\",\n    disabled: false,\n    onClick: function onClick() {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }\n  })));\n}\nexport default SearchResultsPage;","map":{"version":3,"names":["React","useState","useEffect","useLocation","Button","CITIES","Distances","SearchResultsPage","location","_useState","_useState2","_slicedToArray","origin","setOrigin","_useState3","_useState4","intermediateCities","setIntermediateCities","_useState5","_useState6","cities","setCities","_useState7","_useState8","destination","setDestination","_useState9","_useState10","date","setDate","_useState11","_useState12","passengers","setPassengers","_useState13","_useState14","distance","setDistance","_useState15","_useState16","distances","setDistances","_useState17","_useState18","loading","setLoading","_useState19","_useState20","error","setError","searchParams","URLSearchParams","search","get","intermediateCitiesStr","split","calculateDistance","setTimeout","cityCoordinates","reduce","coords","_ref","_ref2","name","lat","lon","parseFloat","toString","route","concat","_toConsumableArray","totalDistance","i","length","startCity","endCity","startCoord","endCoord","Error","calculateHaversineDistance","toFixed","console","log","earthRadius","toRadians","degrees","Math","PI","dLat","dLon","lat1","lat2","a","sin","cos","c","atan2","sqrt","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","Fragment","join","title","disabled","onClick"],"sources":["/Users/sbeuran/Desktop/dev/coding_challenge/travel-buddy/src/pages/SearchResultsPage.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport Button from '../components/Button';\nimport { CITIES } from '../constants/const';\nimport Distances from '../components/Distances';\n\nfunction SearchResultsPage() {\n  const location = useLocation();\n\n  const [origin, setOrigin] = useState('');\n  const [intermediateCities, setIntermediateCities] = useState<string[]>([]);\n  const [cities, setCities] = useState<string[]>([]);\n  const [destination, setDestination] = useState('');\n  const [date, setDate] = useState('');\n  const [passengers, setPassengers] = useState('');\n\n  const [distance, setDistance] = useState('');\n  const [distances, setDistances] = useState<number[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    const searchParams = new URLSearchParams(location.search);\n    setOrigin(searchParams.get('origin') || '');\n    setDestination(searchParams.get('destination') || '');\n    const intermediateCitiesStr = searchParams.get('intermediateCities');\n    if (intermediateCitiesStr) {\n      setIntermediateCities(intermediateCitiesStr.split(','));\n    } else {\n      setIntermediateCities([]);\n    }\n    setDate(searchParams.get('date') || '');\n    setPassengers(searchParams.get('passengers') || '');\n    // Retrieve and set other form data from URL parameters\n  }, [location]);\n\n  useEffect(() => {\n    if (origin !== '' && destination !== '') {\n      calculateDistance();\n    }\n  }, [origin, destination]);\n\n  const calculateDistance = () => {\n    setLoading(true);\n    setError(false);\n\n    // Simulate asynchronous distance calculation\n    setTimeout(() => {\n      try {\n        const cityCoordinates: { [key: string]: { lat: number; lon: number } } = CITIES.reduce(\n          (coords, [name, lat, lon]) => {\n            coords[name] = { lat: parseFloat(lat.toString()), lon: parseFloat(lon.toString()) };\n            return coords;\n          },\n          {} as { [key: string]: { lat: number; lon: number } }\n        );\n\n        const route = [origin, ...intermediateCities, destination];\n        setCities(route);\n        let totalDistance = 0;\n\n        for (let i = 0; i < route.length - 1; i++) {\n          const startCity = route[i];\n          const endCity = route[i + 1];\n\n          const startCoord = cityCoordinates[startCity];\n          const endCoord = cityCoordinates[endCity];\n\n          if (!startCoord || !endCoord) {\n            throw new Error('Invalid cities for distance calculation');\n          }\n\n          const distance = calculateHaversineDistance(startCoord, endCoord);\n          setDistances([...distances, distance]);\n          totalDistance += distance;\n        }\n\n        setDistance(totalDistance.toFixed(2));\n        setLoading(false);\n      } catch (error) {\n        console.log(error)\n        setDistance('');\n        setLoading(false);\n        setError(true);\n      }\n    }, 500);\n  };\n\n  const calculateHaversineDistance = (startCoord: { lat: number; lon: number }, endCoord: { lat: number; lon: number }) => {\n    const earthRadius = 6371; // in kilometers\n\n    const toRadians = (degrees: number) => {\n      return (degrees * Math.PI) / 180;\n    };\n\n    const dLat = toRadians(endCoord.lat - startCoord.lat);\n    const dLon = toRadians(endCoord.lon - startCoord.lon);\n\n    const lat1 = toRadians(startCoord.lat);\n    const lat2 = toRadians(endCoord.lat);\n\n    const a =\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(lat1) * Math.cos(lat2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const distance = earthRadius * c;\n\n    return distance;\n  };\n\n  return (\n    <div className='page'>\n      <div className='result'>\n        {loading ? (\n          <p>Loading...</p>\n          ) : (\n            <>\n            {error ? (\n              <>\n                <p>Oops! Something went wrong!</p>\n              </>\n            ) : (\n              <>\n                <p>Origin: {origin}</p>\n                <p>Intermediate Cities: {intermediateCities.join(', ')}</p>\n                <p>Destination: {destination}</p>\n                <Distances cities={cities} distances={distances}/>\n                <p><span className='color-font'>{distance} km</span> is total distance</p>\n                <p><span className='color-font'>{passengers}</span> Passengers</p>\n                <p className='color-font'>{date}</p>\n              </>\n            )}\n          </>\n        )}\n        <Button title='Back' disabled={false} onClick={() => {}}/>\n      </div>\n    </div>\n  );\n}\n\nexport default SearchResultsPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}